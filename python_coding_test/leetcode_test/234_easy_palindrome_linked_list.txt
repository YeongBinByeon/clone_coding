# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
import copy

class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        
        # 모범답안
        my_list = []
        while head != None:
            val = head.val
            my_list.append(val)
            head = head.next
        if my_list == my_list[::-1]:
            return True
        return False
        
        
#         # 아래처럼 이상하게 짠 이유 
#         # 1. [::-1] 으로 리스트 역순 정렬된 것 return 받는거 까먹음
#         # 2. list == list 가 비교가 가능한지 잘 몰랐음
#         cnt = 0
#         tp =copy.deepcopy(head)
 
#         tp_list = []
#         while tp != None:
#             cnt += 1
#             tp_list.append(tp.val)
#             tp = tp.next
#         print(cnt)

        
#         temp_list = []
#         for i in range(1, cnt+1):
#             if i > cnt/2 and cnt/2 > i-1:
#                 pass
            
#             elif i > cnt/2:
#                 try:
#                     if head.val != temp_list.pop():
#                         return False
#                 except Exception as e:
#                     pass
#             else:
#                 temp_list.append(head.val)
            
#             head = head.next
#         return True
    
    